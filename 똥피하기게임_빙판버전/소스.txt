#include <stdio.h>
#include <windows.h>
#include <stdlib.h>
#include <conio.h>
#include<time.h>

#define WIDTH 50;
#define HEIGHT 30;

typedef enum { NOCURSOR, SOLIDCURSOR, NORMALCURSOR } CURSOR_TYPE; //커서숨기는 함수에 사용되는 열거형 
void gotoxy(double x, double y); // 커서 이동하는 함수.
void setcursortype(CURSOR_TYPE c); // 커서 없애는 함수.
int isKeyDown(int key); // 키보드의 입력값을 리턴하는 함수.

const double end_x = WIDTH;
const double x = 5; // 시작점 x좌표
const double y = HEIGHT; // 시작점 y좌표
typedef struct
{
	double x;
	double y;
	int state;
	double acceleration = 0.00; // 떨어지는 똥의 가속도 
}DDONG; // 떨어지는 똥

typedef struct
{
	double x;
	double y;
	double acceleration = 0.00; // 플레이어의 가속도
}Player; // 플레이어
Player player;
DDONG ddongs[20];
void DrawBoard(); // 게임판 그리는 함수.
void MovePlayer(); // 플레이어를 움직이는 함수.
void Accel();
void DropDDong(); // 똥을 떨어뜨리는 함수.
void CrashPlayer();
int main() {
	setcursortype(NOCURSOR); //커서 없앰
	for (int i = 0; i < 20; i++) {
		ddongs[i].state = FALSE;
		ddongs[i].x = 2 * i + 10;
		ddongs[i].y = 2;
	}
	player.x = (end_x - x)/2;
	player.y = y;
	gotoxy(player.x, player.y);  printf("■");
	DrawBoard();
	while (1) {
		Sleep(1);
		Accel();
		MovePlayer();
		DropDDong();
		CrashPlayer();
		//gotoxy(0, 2); printf("%lf\n", acceleration);
	}
	return 0;
}
void DrawBoard() {
	for (int i = x; i <= end_x; i++) {
		gotoxy(i, y + 1); printf("▩");
	}
}
void MovePlayer() {
	gotoxy(player.x, player.y); printf(" ");
	player.x += player.acceleration;
	if (player.x <= 5) {
		player.x = 6;
		player.acceleration = 0;
	}
	if (player.x >= end_x) {
		player.x = end_x - 1;
		player.acceleration = 0;
	}
	gotoxy(player.x, player.y);  printf("■");
	return;
}
void Accel() {
	if (player.acceleration < 0.5 && player.acceleration >(-1) * (0.5)) {
		if (isKeyDown(VK_RIGHT)) {
			player.acceleration += 0.025;
			return;
		}
		if (isKeyDown(VK_LEFT)) {
			player.acceleration -= 0.025;
			return;
		}
	}
	if (player.acceleration < 0) {
		player.acceleration += 0.0075;
		return;
	}
	if (player.acceleration > 0) {
		player.acceleration -= 0.0075;
		return;
	}

}
void DropDDong() {
	int ddongindex = rand() % 20;
	ddongs[ddongindex].state = TRUE;
	for (int i = 0; i < 20; i++) {
		if (ddongs[i].state) {
			gotoxy(ddongs[i].x, ddongs[i].y);  printf(" ");
			ddongs[i].y += ddongs[i].acceleration;
			ddongs[i].acceleration += 0.01;
			gotoxy(ddongs[i].x, ddongs[i].y);  printf("●");
		}
	}
	for (int i = 0; i < 20; i++) {
		if (ddongs[i].y >= y + 1) {
			//score += 100;
			gotoxy(ddongs[i].x, y + 1);  printf("▩");
			ddongs[i].state = FALSE;
			ddongs[i].acceleration = 0;
			ddongs[i].y = 2;
			if ((ddongs[i].x == (int)player.x))
				exit(0);
		}
	}
}
void CrashPlayer() {
	for (int i = 0; i < 20; i++) {
		if ((ddongs[i].x == (int)player.x) && (ddongs[i].y == player.y)) {
			exit(0);
		}
	}
}
// 커서를 움직이는 함수.
void gotoxy(double x, double y)
{
	//COORD : window.h에 있는 구조체, {SHORT x, SHORT y} 로 구성되어 있다.
	COORD pos = { x * 2, y };
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);
}
//커서숨기는 함수
void setcursortype(CURSOR_TYPE c) {
	CONSOLE_CURSOR_INFO CurInfo;

	switch (c) {
	case NOCURSOR:
		CurInfo.dwSize = 1;
		CurInfo.bVisible = FALSE;
		break;
	case SOLIDCURSOR:
		CurInfo.dwSize = 100;
		CurInfo.bVisible = TRUE;
		break;
	case NORMALCURSOR:
		CurInfo.dwSize = 20;
		CurInfo.bVisible = TRUE;
		break;
	}
	SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &CurInfo);
}
// 키 입력시 값 반환하는 함수.
int isKeyDown(int key)
{
	return ((GetAsyncKeyState(key) & 0x8000) != 0);
}
