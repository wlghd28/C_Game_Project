#include <stdio.h>
#include <windows.h>
#include <stdlib.h>
#include <conio.h>
#include<time.h>
// !주의 BMP 파일은 이미지데이터가 거꾸로 들어가있다.
#pragma warning(disable : 4996)
#pragma pack(push, 1)
struct Bitmapfileheader
{
	short int bmptype;
	int bfsize;
	short int bfreserved1, bfreserved2;
	int bfoffbits;
}bfh;
struct Bitmapinfoheader
{
	int bisize, biwidth, biheight;
	short int biplanes, bibitcount;
	int compression, sizeimage, xpelspermeter, ypelspermeter, biclrused, biclrimportant;
}bih;
struct Palette {
	unsigned char blue;
	unsigned char green;
	unsigned char red;
}rgb;
#pragma pack(pop)	

const int start_x = 900;
const int start_y = 862;
const int left_end = 300;
const int right_end = 1500;
const int up_end = 0; 
const int down_end = 900;
const int stone_count = 20; // 떨어지는 돌의 개수

int stone_width = 0;
int stone_height = 0;
int player_width = 0;
int player_height = 0;
int item_width = 0;
int item_height = 0;
int bg_width = 0;
int bg_height = 0;

int score = -2000; // 점수(처음 속도가 너무빨라서 점수 조절)
int item_score = 0; // 아이템을 먹은 개수
int level = 1; // 게임 레벨

typedef struct
{
	int x;
	int y;
	int state;
	int acceleration = 0; // 떨어지는 돌의 가속도 
}STONE; // 떨어지는 돌

typedef struct
{
	int x;
	int y;
	int state;
	//int acceleration = 0; // 떨어지는 아이템 가속도 
}ITEM; // 먹어야하는 아이템

typedef struct
{
	int x;
	int y;
	int state; // 플레이어가 향하고 있는 방향(0 = 왼쪽, 1 = 오른쪽)
	int motion; // 플레이어가 뛰는 모션(0과 1 두가지 모션이 있음)
	int stop; // 플레이어가 멈춰있는 상태(0이면 멈춤 1이면 움직임)
	int acceleration = 0; // 플레이어의 가속도
}Player; // 플레이어

COLORREF **color; // 장애물과 플레이어의 잔상을 처리하기 위해 배경화면 비트맵 정보를 담아놓을 메모리.
Player player; // 플레이어는 한명이므로 변수 하나만 선언.
STONE* stones; // 떨어지는 돌의 메모리를 동적할당 할 포인터 변수.
ITEM item; // 아이템은 한개씩 떨어지므로 변수 하나만 선언.

typedef enum { NOCURSOR, SOLIDCURSOR, NORMALCURSOR } CURSOR_TYPE; //커서숨기는 함수에 사용되는 열거형 
void gotoxy(short x, short y); // 커서 이동하는 함수.
void setcursortype(CURSOR_TYPE c); // 커서 없애는 함수.
int isKeyDown(int key); // 키보드의 입력값을 리턴하는 함수.

void DrawTitle(); // 타이틀화면 출력.
void DrawBackground(); // 배경을 그리는 함수.
void DrawPlayer(int x, int y); // 현재위치에 플레이어를 그리는 함수.
void MovePlayer(); // 플레이어를 움직이는 함수.
void ErasePlayer(int x, int y); // 현재위치에 있는 잔상을 지우는 함수.
void DrawStone(int x, int y); // 현재위치에 돌을 그리는 함수.
void DropStone(); // 위에서 돌을 떨어뜨리는 함수.
void EraseStone(int x, int y); // 현재위치에 있는 잔상을 지우는 함수.
void CrashStone(); // 플레이어가 돌과 충돌했을 시 게임종료.
void DrawItem(int x, int y); // 현재위치에 아이템을 그리는 함수.
void DropItem(); // 위에서 아이템을 떨어뜨리는 함수.
void EraseItem(int x, int y); // 현재위치에 있는 잔상을 지우는 함수.
void CrashItem(); // 플레이어가 아이템을 먹었을 때 개수 증가.
void Accel(); // 가속도 처리 함수.(미끄러지는 듯한 움직임)
void GameScore(); // 점수를 알려주는 함수.
void NextStage(); // 다음스테이지로 넘기는 함수.
void GameOver(); // 게임을 종료하는 함수.

int main(void) {
	setcursortype(NOCURSOR); //커서 없앰

	stones = (STONE*)malloc(sizeof(STONE) * stone_count); // 떨어지는 돌을 메모리 할당
	// 플레이어의 좌표위치 및 상태 초기화.
	player.x = start_x;
	player.y = start_y;
	player.motion = 0;
	player.stop = 0;
	// 돌들의 상태와 좌표위치 초기화.
	for (int i = 0; i < stone_count; i++) {
		stones[i].state = FALSE;
		stones[i].x = left_end + 60 * i;
		stones[i].y = 0;
		stones[i].acceleration = 0;
	}
	// 아이템 y좌표 초기화.
	item.y = 0;

	// 화면출력 시작
	DrawTitle();
	DrawBackground();
	DrawPlayer(start_x, start_y);
	// 무한 반복을 시키며 게임 실행
	while (1) {
		GameScore();
		Accel();
		MovePlayer();
		DropStone();
		CrashStone();
		// 레벨2로 넘어갈 경우 아이템을 추가
		if (level == 2) {
			DropItem();
			CrashItem();
		}
	}

	// 장애물의 정보를 저장해놓은 메모리 해제
	free(stones); 
	// 배경화면의 비트맵 정보를 저장해놓은 메모리 해제
	for (int i = 0; i < bg_width; i++)
	{
		free(color[i]);
	}
	free(color);

	return 0;
}
void DrawTitle() 
{
	int x = 5; //타이틀화면이 표시되는 x좌표 
	int y = 5; //타이틀화면이 표시되는 y좌표 
	gotoxy(x, y + 0); printf("■□□□■■■□□■■□□■■"); Sleep(100);
	gotoxy(x, y + 1); printf("■■■□  ■□□    ■■□□■"); Sleep(100);
	gotoxy(x, y + 2); printf("□□□■              □■  ■"); Sleep(100);
	gotoxy(x, y + 3); printf("■■□■■  □  ■  □□■□□"); Sleep(100);
	gotoxy(x, y + 4); printf("■■  ■□□□■■■□■■□□"); Sleep(100);
	gotoxy(x + 5, y + 2); printf("장애물피하기 게임"); Sleep(100);
	gotoxy(x, y + 7); printf("Please Enter Any Key to Start..");
	gotoxy(x, y + 10); printf("◁  ▷ : Left / Right");

	while (1) {
		if (_kbhit())
			break;
	}
	system("cls");
	while (_kbhit()) _getch(); //버퍼에 기록된 키값을 버림
}
void DrawBackground() 
{
	HDC hdc;
	hdc = GetDC(NULL);
	FILE * fp;
	fp = fopen(/*"ice_ground.bmp"*/"background.bmp", "rb");

	if (fp == NULL)
	{
		printf("file not found");
		getchar();
		exit(0);
	}

	fread(&bfh, sizeof(bfh), 1, fp);
	fread(&bih, sizeof(bih), 1, fp);

	bg_width = bih.biwidth;
	bg_height = bih.biheight;

	// 배경화면 비트맵 정보 메모리 동적할당
	color = (COLORREF**)malloc(sizeof(COLORREF*) * bg_width);
	for (int i = 0; i < bg_width; i++)
	{
		color[i] = (COLORREF*)malloc(sizeof(COLORREF) * bg_height);
	}

	for (int i = 0; i<bg_height; i++)
	{
		for (int j = 0; j<bg_width; j++)
		{ 
			fread(&rgb, 4, 1, fp);
			SetPixel(hdc, j , bg_height - i -  1, RGB(rgb.red, rgb.green, rgb.blue));
			// 배경화면의 RGB 정보를 좌표에 따라 저장.
			color[j][bg_height - i - 1] = RGB(rgb.red, rgb.green, rgb.blue);
		}
	}
	ReleaseDC(NULL, hdc);
	fclose(fp);
}
void DrawPlayer(int x, int y)
{
	HDC hdc;
	hdc = GetDC(NULL);
	FILE * fp = NULL;
	if (player.acceleration == 0) {
		fp = fopen("player.bmp", "rb");
	}
	else {
		if (player.motion % 2 == 0) {
			if (player.state == 0) {
				fp = fopen("player_left1.bmp", "rb");
			}
			if (player.state == 1) {
				fp = fopen("player_right1.bmp", "rb");
			}
		}
		if (player.motion % 2 == 1) {
			if (player.state == 0) {
				fp = fopen("player_left2.bmp", "rb");
			}
			if (player.state == 1) {
				fp = fopen("player_right2.bmp", "rb");
			}
		}
	}
	if (fp == NULL)
	{
		printf("file not found");
		getchar();
		exit(0);
	}

	fread(&bfh, sizeof(bfh), 1, fp);
	fread(&bih, sizeof(bih), 1, fp);

	player_width = bih.biwidth;
	player_height = bih.biheight;

	for (int i = 0; i<player_height; i++)
	{
		for (int j = 0; j<player_width; j++)
		{
			fread(&rgb, 4, 1, fp);
			if (!((rgb.red == 255) && (rgb.blue == 255) && (rgb.green == 255))) {
				SetPixel(hdc, j + x, player_height - i - 1 + y, RGB(rgb.red, rgb.green, rgb.blue));
			}
		}
	}

	ReleaseDC(NULL, hdc);
	fclose(fp);
}
void MovePlayer()
{
	if (player.stop == 1) {
		ErasePlayer(player.x, player.y);
		player.x += player.acceleration;
		if (player.x <= left_end) {
			player.x = left_end + 1;
			player.acceleration = 0;
		}
		if (player.x >= right_end) {
			player.x = right_end - 1;
			player.acceleration = 0;
		}
		DrawPlayer(player.x, player.y);
		if (player.acceleration == 0) {
			player.stop = 0;
		}
	}
}
void ErasePlayer(int x, int y)
{
	HDC hdc;
	hdc = GetDC(NULL);

	for (int i = 0; i<player_height; i++)
	{
		for (int j = 0; j<player_width; j++)
		{		
			SetPixel(hdc, j + x, player_height - i - 1 + y, color[j + x][player_height - i - 1 + y]);
		}

	}
	
	ReleaseDC(NULL, hdc);
}
void DrawStone(int x, int y)
{
	HDC hdc;
	hdc = GetDC(NULL);
	FILE * fp = NULL;
	fp = fopen("stone.bmp", "rb");
	if (fp == NULL)
	{
		printf("file not found");
		getchar();
		exit(0);
	}

	fread(&bfh, sizeof(bfh), 1, fp);
	fread(&bih, sizeof(bih), 1, fp);

	stone_width = bih.biwidth;
	stone_height = bih.biheight;

	for (int i = 0; i<stone_height; i++)
	{
		for (int j = 0; j<stone_width; j++)
		{
			fread(&rgb, 4, 1, fp);
			if (!((rgb.red == 255) && (rgb.blue == 255) && (rgb.green == 255))) {
				SetPixel(hdc, j + x, stone_height - i - 1 + y, RGB(rgb.red, rgb.green, rgb.blue));
			}
		}
	}
	ReleaseDC(NULL, hdc);
	fclose(fp);
}
void DropStone()
{
	int stoneindex = rand() % stone_count;
	stones[stoneindex].state = TRUE;

	for (int i = 0; i < stone_count; i++) {
		// 돌의상태가 TRUE 일 경우
		if (stones[i].state) {
			EraseStone(stones[i].x, stones[i].y); // 현재 위치의 돌을 지운다
			stones[i].y += stones[i].acceleration; // 돌의 위치 변경
			stones[i].acceleration += 1; // 돌의 가속도 가속
			// 돌이 바닥까지 떨어졌을 경우 돌 상태 초기화
			if (stones[i].y >= start_y) {
				score += 100;
				stones[i].state = FALSE;
				stones[i].acceleration = 0;
				stones[i].y = 0;
			}
			// 아닌 경우 다음 위치에 돌을 그린다
			else 
			{
				DrawStone(stones[i].x, stones[i].y); 
			}
		}
	}
}
void EraseStone(int x, int y)
{
	HDC hdc;
	hdc = GetDC(NULL);
	for (int i = 0; i < stone_height; i++)
	{
		for (int j = 0; j < stone_width + 2; j++)
		{
			SetPixel(hdc, j + x, stone_height - i - 1 + y, color[j + x][stone_height - i - 1 + y]);
		}
	}
	ReleaseDC(NULL, hdc);
}
void CrashStone()
{
	for (int i = 0; i < stone_count; i++) {
		if (stones[i].state) {
			if ((stones[i].y >= player.y - 20) && (stones[i].x >= player.x && stones[i].x <= player.x + 30)) 
			{
				if (score >= 0)
					GameOver();
			}
		}
	}
}
void DrawItem(int x, int y)
{
	HDC hdc;
	hdc = GetDC(NULL);
	FILE * fp = NULL;

	fp = fopen("item.bmp", "rb");

	if (fp == NULL)
	{
		printf("file not found");
		getchar();
		exit(0);
	}

	fread(&bfh, sizeof(bfh), 1, fp);
	fread(&bih, sizeof(bih), 1, fp);

	item_width = bih.biwidth;
	item_height = bih.biheight;

	for (int i = 0; i<item_height; i++)
	{
		for (int j = 0; j<item_width + 2; j++)
		{
			fread(&rgb, 4, 1, fp);
			if (!((rgb.red == 255) && (rgb.blue == 255) && (rgb.green == 255))) {
				SetPixel(hdc, j + x, item_height - i + y, RGB(rgb.red, rgb.green, rgb.blue));
			}
		}
	}

	ReleaseDC(NULL, hdc);
	fclose(fp);
}
void DropItem()
{
	if (!item.state) {
		int itemindex = rand() % (stone_count - 1);
		item.state = TRUE;
		item.x = left_end + 30 + 60 * itemindex;
	}
	if(item.state){
		EraseItem(item.x, item.y); // 현재 위치의 아이템을 지운다
		item.y += 6; // 아이템 위치 변경
		// 아이템이 바닥까지 떨어졌을 경우 게임 오버
		if (item.y >= start_y + 30) {
			GameOver();
		}
		// 아닌 경우 다음 위치에 아이템을 그린다
		else
		{
			DrawItem(item.x, item.y);
		}
	}
}
void EraseItem(int x, int y)
{
	HDC hdc;
	hdc = GetDC(NULL);

	for (int i = 0; i < item_height; i++)
	{
		for (int j = 0; j < item_width + 2; j++)
		{
			SetPixel(hdc, j + x, item_height - i - 1 + y, color[j + x][item_height - i - 1 + y]);
		}

	}
	ReleaseDC(NULL, hdc);

}
void CrashItem()
{
	if (item.state) {
		if ((item.y >= player.y - 20) && (item.x >= player.x && item.x <= player.x + 30))
		{
			EraseItem(item.x, item.y);
			item_score++;
			item.y = 0;
			item.state = FALSE;
		}
	}
}
void Accel()
{
	if (player.acceleration < 24 && player.acceleration > (-1) * 24) {
		if (isKeyDown(VK_RIGHT)) {
			player.acceleration += 2;
			player.state = 1;
			player.stop = 1;
			player.motion++;
			return;
		}
		if (isKeyDown(VK_LEFT)) {
			player.acceleration -= 2;
			player.state = 0;
			player.stop = 1;
			player.motion++;
			return;
		}
	}
	if (player.acceleration < 0) {
		player.acceleration += 1;
		player.motion++;
		return;
	}
	if (player.acceleration > 0) {
		player.acceleration -= 1;
		player.motion++;
		return;
	}

}
void GameScore()
{
	gotoxy(0, 0);
	printf("Level : %d\n", level);
	printf("Score : %6d\n", score);
	printf("Item Score : %6d\n", item_score);
	if (score == 10000)
		NextStage();
	if (score == 50000)
		GameOver();
}
void NextStage()
{
	score += 100;
	level++;
	system("cls");
	int x = 5;
	int y = 5;
	gotoxy(x, y + 0); printf("▤▤▤▤▤▤▤▤▤▤▤▤▤▤▤▤▤▤");
	gotoxy(x, y + 1); printf("▤                                ▤");
	gotoxy(x, y + 2); printf("▤  +---------------------+       ▤");
	gotoxy(x, y + 3); printf("▤  |    Stage Celar!!    |       ▤");
	gotoxy(x, y + 4); printf("▤  +---------------------+       ▤");
	gotoxy(x, y + 5); printf("▤  Press any key to NextStage..  ▤");
	gotoxy(x, y + 6); printf("▤                                ▤");
	gotoxy(x, y + 7); printf("▤▤▤▤▤▤▤▤▤▤▤▤▤▤▤▤▤▤");

	while (_kbhit()) _getch(); //버퍼에 기록된 키값을 버림

	while (1) {
		if (_kbhit())
			break;
	}
	system("cls");
}
void GameOver() 
{
	int x = 5;
	int y = 5;
	system("cls");
	gotoxy(x, y + 0); printf("▤▤▤▤▤▤▤▤▤▤▤▤▤▤▤▤▤"); //게임오버 메세지 
	gotoxy(x, y + 1); printf("▤                              ▤");
	gotoxy(x, y + 2); printf("▤  +-----------------------+   ▤");
	gotoxy(x, y + 3); printf("▤  |  G A M E  O V E R..   |   ▤");
	gotoxy(x, y + 4); printf("▤  +-----------------------+   ▤");
	gotoxy(x, y + 5); printf("▤                              ▤");
	gotoxy(x, y + 6); printf("▤  YOUR SCORE: %6d          ▤", score);
	gotoxy(x, y + 7); printf("▤                              ▤");
	gotoxy(x, y + 8); printf("▤                              ▤");
	gotoxy(x, y + 9); printf("▤▤▤▤▤▤▤▤▤▤▤▤▤▤▤▤▤");
	while (1) {
		if (isKeyDown(VK_ESCAPE)) {
			exit(0);
		}
	}
}
// 커서를 움직이는 함수.
void gotoxy(short x, short y)
{
	//COORD : window.h에 있는 구조체, {SHORT x, SHORT y} 로 구성되어 있다.
	COORD pos = { x * 2, y };
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);
}
//커서숨기는 함수
void setcursortype(CURSOR_TYPE c) {
	CONSOLE_CURSOR_INFO CurInfo;

	switch (c) {
	case NOCURSOR:
		CurInfo.dwSize = 1;
		CurInfo.bVisible = FALSE;
		break;
	case SOLIDCURSOR:
		CurInfo.dwSize = 100;
		CurInfo.bVisible = TRUE;
		break;
	case NORMALCURSOR:
		CurInfo.dwSize = 20;
		CurInfo.bVisible = TRUE;
		break;
	}
	SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &CurInfo);
}
// 키 입력시 값 반환하는 함수.
int isKeyDown(int key)
{
	return ((GetAsyncKeyState(key) & 0x8000) != 0);
}
