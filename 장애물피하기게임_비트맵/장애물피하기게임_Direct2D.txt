#include "stdafx.h"
#include <Windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <conio.h>
#include <tchar.h>
#include "resource.h"

// 다이렉트 관련 헤더파일 선언
#include <d2d1.h>
#include <d2d1helper.h>
#include <wincodec.h>
#pragma comment (lib, "d2d1.lib")
using namespace D2D1;

#pragma warning(disable : 4996)
#pragma pack(push, 1)
struct Bitmapfileheader
{
	short int bmptype;
	int bfsize;
	short int bfreserved1, bfreserved2;
	int bfoffbits;
}bfh;
struct Bitmapinfoheader
{
	int bisize, biwidth, biheight;
	short int biplanes, bibitcount;
	int compression, sizeimage, xpelspermeter, ypelspermeter, biclrused, biclrimportant;
}bih;
struct Palette {
	unsigned char blue;
	unsigned char green;
	unsigned char red;
}rgb;
#pragma pack(pop)	


#define MY_FIRST_WND (TEXT("mygame"))
#define p 112 // 일시정지
#define P 80 // 일시정지
// 윈도우창 크기
const int left = 0;
const int up = 0;
const int width = GetSystemMetrics(SM_CXSCREEN);
const int height = GetSystemMetrics(SM_CYSCREEN);

const int start_x = 900;
const int start_y = 862;
const int left_end = 300;
const int right_end = 1500;
const int up_end = 0;
const int down_end = 900;
const int stone_count = 20; // 떨어지는 돌의 개수

int stone_width = 0;
int stone_height = 0;
int player_width = 0;
int player_height = 0;
int item_width = 0;
int item_height = 0;
int bg_width = 0;
int bg_height = 0;

int score = 0; // 점수(처음 속도가 너무빨라서 점수 조절)
int item_score = 0; // 아이템을 먹은 개수
int level = 1; // 게임 레벨

typedef struct
{
	int x;
	int y;
	int state;
	int acceleration = 0; // 떨어지는 돌의 가속도 
}STONE; // 떨어지는 돌

typedef struct
{
	int x;
	int y;
	int state;
	//int acceleration = 0; // 떨어지는 아이템 가속도 
}ITEM; // 먹어야하는 아이템

typedef struct
{
	int x;
	int y;
	int state; // 플레이어가 향하고 있는 방향(0 = 왼쪽, 1 = 오른쪽)
	int motion; // 플레이어가 뛰는 모션(0과 1 두가지 모션이 있음)
	int stop; // 플레이어가 멈춰있는 상태(0이면 멈춤 1이면 움직임)
	int acceleration = 0; // 플레이어의 가속도
}Player; // 플레이어

Player player; // 플레이어는 한명이므로 변수 하나만 선언.
STONE* stones; // 떨어지는 돌의 메모리를 동적할당 할 포인터 변수.
ITEM item; // 아이템은 한개씩 떨어지므로 변수 하나만 선언.

// 다이렉트 관련 전역변수 선언
ID2D1Factory* g_ipD2DFactory = NULL;
ID2D1HwndRenderTarget* g_ipRenderTarget = NULL;
IWICImagingFactory* g_wic_factory;
ID2D1Bitmap* bg_bitmap;
ID2D1Bitmap* player_bitmap;
ID2D1Bitmap* player_left1_bitmap;
ID2D1Bitmap* player_right1_bitmap;
ID2D1Bitmap* player_left2_bitmap;
ID2D1Bitmap* player_right2_bitmap;
ID2D1Bitmap* stone_bitmap;
ID2D1Bitmap* item_bitmap;
D2D1_RECT_F bg_image_rect;
D2D1_RECT_F player_image_rect;
D2D1_RECT_F stone_image_rect;
D2D1_RECT_F item_image_rect;

int isKeyDown(int key); // 키보드의 입력값을 리턴하는 함수.
void DrawTitle(); // 타이틀 문구 출력.
void DrawBackground(); // 배경을 그리는 함수.
void DrawPlayer(int x, int y); // 현재위치에 플레이어를 그리는 함수.
void MovePlayer(); // 플레이어를 움직이는 함수.
void ErasePlayer(int x, int y); // 현재위치에 있는 잔상을 지우는 함수.
void DrawStone(int x, int y); // 현재위치에 돌을 그리는 함수.
void DropStone(); // 위에서 돌을 떨어뜨리는 함수.
void EraseStone(int x, int y); // 현재위치에 있는 잔상을 지우는 함수.
void CrashStone(); // 플레이어가 돌과 충돌했을 시 게임종료.
void DrawItem(int x, int y); // 현재위치에 아이템을 그리는 함수.
void DropItem(); // 위에서 아이템을 떨어뜨리는 함수.
void EraseItem(int x, int y); // 현재위치에 있는 잔상을 지우는 함수.
void CrashItem(); // 플레이어가 아이템을 먹었을 때 개수 증가.
void Accel(); // 가속도 처리 함수.(미끄러지는 듯한 움직임)
void GameScore(); // 점수를 알려주는 함수.
void NextStage(); // 다음스테이지로 넘기는 함수.
void GameOver(); // 게임을 종료하는 함수.
void Init(); // 게임 상태를 초기화시키는 함수.
void FileEception(FILE* fp); // 파일 포인터 예외처리.
void LoadException(HBITMAP hbitmap);
void OnDestroy(HWND hWnd); // 메모리 해제
void ImageLoad(); // 이미지 로드.
void FileLoad(); // 이미지 파일들 로드.
void RegWindowClass();
void MessageLoop();

// 다이렉트 관련 함수 선언
void InitializeD2D();
void CreateRenderTarget(HWND hWnd);

HWND hWnd;

TCHAR lpOut[1024];

INT APIENTRY WinMain(HINSTANCE hIns, HINSTANCE hPrev, LPSTR cmd, INT nShow)
{
	RegWindowClass();//윈도우 클래스 속성 설정 및 등록

	// 컴포넌트를 사용할 수 있도록 프로그램을 초기화한다. 
	CoInitializeEx(NULL, COINIT_APARTMENTTHREADED);

					 //윈도우 인스턴스 생성
	hWnd = CreateWindow(
		MY_FIRST_WND,//클래스 이름
		TEXT("장애물 피하기 게임"), //캡션 명
		WS_OVERLAPPEDWINDOW, //윈도우 스타일
		left, up, width, height,//좌,상,폭,높이
		0,//부모 윈도우 핸들
		0,//메뉴 핸들
		hIns,//인스턴스 핸들
		0);//생성 시 인자

	ShowWindow(hWnd, nShow);//윈도우 인스턴스 시각화, SW_SHOW(시각화), SW_HIDE(비시각화) 
	MessageLoop();//메시지 루프

	return 0;

}

LRESULT CALLBACK MyWndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
	Sleep(30); // 게임 속도 조절
	switch (iMessage)
	{
	case WM_CREATE:
	{
		InitializeD2D();
		CreateRenderTarget(hWnd);
		// WIC 객체를 생성하기 위한 Factory 객체를 생성한다.
		CoCreateInstance(CLSID_WICImagingFactory, NULL, CLSCTX_INPROC_SERVER, IID_PPV_ARGS(&g_wic_factory));
		ImageLoad();
		FileLoad();
		Init();
		break;
	}
	case WM_PAINT:
	{
		ValidateRect(hWnd, NULL); // WM_PAINT 메시지가 다시 발생하지 않게 만든다.
		// 윈도우 최소화, 최대화 버튼 비활성화
		//SetWindowLong(hWnd, GWL_STYLE, GetWindowLong(hWnd, GWL_STYLE) & ~WS_MINIMIZEBOX);
		//SetWindowLong(hWnd, GWL_STYLE, GetWindowLong(hWnd, GWL_STYLE) & ~WS_MAXIMIZEBOX);
		// 화면출력 시작
		DrawBackground();
		//DrawPlayer(start_x, start_y);
		break;
	}
	case WM_KEYDOWN:
	{
		g_ipRenderTarget->BeginDraw();
		//DrawTitle();
		// 윈도우 닫기 버튼 비활성화
		//GameScore();
		Accel();
		MovePlayer();
		DropStone();
		CrashStone();
		// 레벨2로 넘어갈 경우 아이템을 추가		
		if (level == 2)
		{
			DropItem();
			CrashItem();
		}
		g_ipRenderTarget->EndDraw();
		// WM_KEYDOWN에 진입하기 위해 키 이벤트 발생.
		keybd_event(VK_UP, 0, 0, 0);
		break;
	}
	case WM_DESTROY: OnDestroy(hWnd); return 0;
	}
	return DefWindowProc(hWnd, iMessage, wParam, lParam);
}
void RegWindowClass()
{
	WNDCLASS wndclass = { 0 };
	wndclass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);//흰색 브러쉬 핸들
	wndclass.hCursor = LoadCursor(0, IDC_ARROW); //마우스 커서 핸들
	wndclass.hIcon = LoadIcon(0, IDI_APPLICATION); //아이콘 핸들
	wndclass.hInstance = GetModuleHandle(0);//자신 모듈의 인스턴스 핸들
	wndclass.lpfnWndProc = MyWndProc;//윈도우 콜백 프로시저
	wndclass.lpszClassName = MY_FIRST_WND;//클래스 이름 - 클래스 구분자
	wndclass.style = CS_DBLCLKS;//클래스 종류

	RegisterClass(&wndclass);
}
void MessageLoop()
{
	MSG Message;
	while (GetMessage(&Message, 0, 0, 0))//메시지 루프에서 메시지 꺼냄(WM_QUIT이면 FALSE 반환)
	{
		TranslateMessage(&Message);//WM_KEYDOWN이고 키가 문자 키일 때 WM_CHAR 발생
		DispatchMessage(&Message);//콜백 프로시저가 수행할 수 있게 디스패치 시킴
	}
}
// 키 입력시 값 반환하는 함수.
int isKeyDown(int key)
{
	return ((GetAsyncKeyState(key) & 0x8000) != 0);
}
void DrawTitle()
{
	MessageBox(NULL, _T("Please Enter OK button to Start\n◁  ▷ : Left / Right"), _T("장애물 피하기 게임"), MB_OK);
}
void DrawBackground()
{
	// Direct2D의 Render Target을 사용해서 그림 그리기를 시작한다.
	g_ipRenderTarget->BeginDraw();

	// 이미지가 정상적으로 읽혀졌어 생성되어 있다면 DrawBitmap 함수를 사용하여
	// 화면에 gp_bitmap에 저장된 이미지를 출력한다.
	g_ipRenderTarget->DrawBitmap(bg_bitmap, &bg_image_rect, 1.0f, 
		D2D1_BITMAP_INTERPOLATION_MODE_LINEAR, 0);
	// Render Target을 사용해서 그림 그리기를 중지한다.
	g_ipRenderTarget->EndDraw();
	
}
void Init()
{
	stones = (STONE*)malloc(sizeof(STONE) * stone_count); // 떨어지는 돌을 메모리 할당
														  // 플레이어의 좌표위치 및 상태 초기화.
	player.x = start_x;
	player.y = start_y;
	player.motion = 0;
	player.stop = 0;
	player.acceleration = 0;
	// 돌들의 상태와 좌표위치 초기화.
	for (int i = 0; i < stone_count; i++) {
		stones[i].state = FALSE;
		stones[i].x = left_end + 60 * i;
		stones[i].y = 20;
		stones[i].acceleration = 0;
	}
	// 아이템 y좌표 초기화.
	item.y = 0;
}
void OnDestroy(HWND hWnd)

{
	// 읽어들인 그림 이미지가 있다면 제거한다.
	if (bg_bitmap != NULL) 
		bg_bitmap->Release();
	if (player_bitmap != NULL)
		player_bitmap->Release();
	if (player_left1_bitmap != NULL)
		player_left1_bitmap->Release();
	if (player_right1_bitmap != NULL)
		player_right1_bitmap->Release();
	if (player_left2_bitmap != NULL)
		player_left2_bitmap->Release();
	if (player_right2_bitmap != NULL)
		player_right2_bitmap->Release();
	if (stone_bitmap != NULL)
		stone_bitmap->Release();
	if (item_bitmap != NULL)
		item_bitmap->Release();
	// 사용하던 Factory 객체를 제거한다.
	g_ipD2DFactory -> Release();
	// 렌더타겟 제거.
	g_ipRenderTarget -> Release();
	// WIC를 사용하기 위해 만들었던 Factory 객체 제거
	g_wic_factory->Release();     


	// 장애물의 정보를 저장해놓은 메모리 해제
	free(stones);
	CoUninitialize();
	PostQuitMessage(0);//메시지 큐에 WM_QUIT 메시지를 붙임

}
void DrawPlayer(int x, int y)
{
	player_image_rect.left = (FLOAT)x;
	player_image_rect.top = (FLOAT)y;
	player_image_rect.right = (FLOAT)x + player_width;
	player_image_rect.bottom = (FLOAT)y + player_height;

	if (player.acceleration == 0) {
		// 이미지가 정상적으로 읽혀졌어 생성되어 있다면 DrawBitmap 함수를 사용하여
		// 화면에 gp_bitmap에 저장된 이미지를 출력한다.
		g_ipRenderTarget->DrawBitmap(player_bitmap, &player_image_rect);
	}
	else {
		if (player.motion % 2 == 0) {
			if (player.state == 0) {
				g_ipRenderTarget->DrawBitmap(player_left1_bitmap, &player_image_rect);
			}
			if (player.state == 1) {
				g_ipRenderTarget->DrawBitmap(player_right1_bitmap, &player_image_rect);
			}
		}
		if (player.motion % 2 == 1) {
			if (player.state == 0) {
				g_ipRenderTarget->DrawBitmap(player_left2_bitmap, &player_image_rect);
			}
			if (player.state == 1) {
				g_ipRenderTarget->DrawBitmap(player_right2_bitmap, &player_image_rect);
			}
		}
	}

}
void MovePlayer()
{
	if (player.stop == 1) {
		ErasePlayer(player.x, player.y);
		player.x += player.acceleration;
		if (player.x <= left_end) {
			player.x = left_end + 1;
			player.acceleration = 0;
		}
		if (player.x >= right_end) {
			player.x = right_end - 1;
			player.acceleration = 0;
		}
		DrawPlayer(player.x, player.y);
		if (player.acceleration == 0) {
			player.stop = 0;
		}
	}
}
void ErasePlayer(int x, int y)
{
	player_image_rect.left = (FLOAT)x;
	player_image_rect.top = (FLOAT)y;
	player_image_rect.right = (FLOAT)x + player_width;
	player_image_rect.bottom = (FLOAT)y + player_height;

	// 이미지가 정상적으로 읽혀졌어 생성되어 있다면 DrawBitmap 함수를 사용하여
	g_ipRenderTarget->DrawBitmap(bg_bitmap, &player_image_rect, 1.0f ,
		D2D1_BITMAP_INTERPOLATION_MODE_LINEAR, &player_image_rect);

}
void DrawStone(int x, int y)
{
	stone_image_rect.left = (FLOAT)x;
	stone_image_rect.top = (FLOAT)y;
	stone_image_rect.right = (FLOAT)x + stone_width;
	stone_image_rect.bottom = (FLOAT)y + stone_height;

	// 이미지가 정상적으로 읽혀졌어 생성되어 있다면 DrawBitmap 함수를 사용하여
	// 화면에 gp_bitmap에 저장된 이미지를 출력한다.
	g_ipRenderTarget->DrawBitmap(stone_bitmap, &stone_image_rect);

}
void DropStone()
{
	int stoneindex = rand() % stone_count;
	stones[stoneindex].state = TRUE;

	for (int i = 0; i < stone_count; i++) {
		// 돌의상태가 TRUE 일 경우
		if (stones[i].state) {
			EraseStone(stones[i].x, stones[i].y); // 현재 위치의 돌을 지운다
			stones[i].y += stones[i].acceleration; // 돌의 위치 변경
			stones[i].acceleration += 1; // 돌의 가속도 가속
										 // 돌이 바닥까지 떨어졌을 경우 돌 상태 초기화
			if (stones[i].y >= start_y) {
				score += 100;
				stones[i].state = FALSE;
				stones[i].acceleration = 0;
				stones[i].y = 0;
			}
			// 아닌 경우 다음 위치에 돌을 그린다
			else
			{
				DrawStone(stones[i].x, stones[i].y);
			}
		}
	}
}
void EraseStone(int x, int y)
{
	
	stone_image_rect.left = (FLOAT)x;
	stone_image_rect.top = (FLOAT)y;
	stone_image_rect.right = (FLOAT)x + stone_width;
	stone_image_rect.bottom = (FLOAT)y + stone_height;
	
	g_ipRenderTarget->DrawBitmap(bg_bitmap, &stone_image_rect, 1.0f,
		D2D1_BITMAP_INTERPOLATION_MODE_LINEAR, &stone_image_rect);
}
void CrashStone()
{
	for (int i = 0; i < stone_count; i++) {
		if (stones[i].state) {
			if ((stones[i].y >= player.y - 20) && (stones[i].x >= player.x && stones[i].x <= player.x + 30))
			{
				if (score >= 0)
					GameOver();
			}
		}
	}
}
void DrawItem(int x, int y)
{
	item_image_rect.left = (FLOAT)x;
	item_image_rect.top = (FLOAT)y;
	item_image_rect.right = (FLOAT)x + item_width;
	item_image_rect.bottom = (FLOAT)y + item_height;

	// 이미지가 정상적으로 읽혀졌어 생성되어 있다면 DrawBitmap 함수를 사용하여
	// 화면에 gp_bitmap에 저장된 이미지를 출력한다.
	g_ipRenderTarget->DrawBitmap(item_bitmap, &item_image_rect);

}
void DropItem()
{
	if (!item.state) {
		int itemindex = rand() % (stone_count - 1);
		item.state = TRUE;
		item.x = left_end + 30 + 60 * itemindex;
	}
	if (item.state) {
		EraseItem(item.x, item.y); // 현재 위치의 아이템을 지운다
		item.y += 6; // 아이템 위치 변경
					 // 아이템이 바닥까지 떨어졌을 경우 게임 오버
		if (item.y >= start_y + 30) {
			GameOver();
		}
		// 아닌 경우 다음 위치에 아이템을 그린다
		else
		{
			DrawItem(item.x, item.y);
		}
	}
}
void EraseItem(int x, int y)
{
	item_image_rect.left = (FLOAT)x;
	item_image_rect.top = (FLOAT)y;
	item_image_rect.right = (FLOAT)x + item_width;
	item_image_rect.bottom = (FLOAT)y + item_height;

	g_ipRenderTarget->DrawBitmap(bg_bitmap, &item_image_rect, 1.0f,
		D2D1_BITMAP_INTERPOLATION_MODE_LINEAR, &item_image_rect);
}
void CrashItem()
{
	if (item.state) {
		if ((item.y >= player.y - 20) && (item.x >= player.x && item.x <= player.x + 30))
		{
			EraseItem(item.x, item.y);
			item_score++;
			item.y = 20;
			item.state = FALSE;
		}
	}
}
void Accel()
{
	if (player.acceleration < 24 && player.acceleration >(-1) * 24) {
		if (isKeyDown(VK_RIGHT)) {
			player.acceleration += 2;
			player.state = 1;
			player.stop = 1;
			player.motion++;
			return;
		}
		if (isKeyDown(VK_LEFT)) {
			player.acceleration -= 2;
			player.state = 0;
			player.stop = 1;
			player.motion++;
			return;
		}
	}
	if (player.acceleration < 0) {
		player.acceleration += 1;
		player.motion++;
		return;
	}
	if (player.acceleration > 0) {
		player.acceleration -= 1;
		player.motion++;
		return;
	}

}
void GameScore()
{
	HDC hdc;
	hdc = GetDC(hWnd);

	LPCTSTR str1 = TEXT("LEVEL : %d");
	LPCTSTR str2 = TEXT("SCORE : %6d");
	LPCTSTR str3 = TEXT("ITEM SCORE : %6d");
	wsprintf(lpOut, str1, level);
	TextOut(hdc, 300, 10, lpOut, lstrlen(lpOut));
	wsprintf(lpOut, str2, score);
	TextOut(hdc, 900, 10, lpOut, lstrlen(lpOut));
	wsprintf(lpOut, str3, item_score);
	TextOut(hdc, 1500, 10, lpOut, lstrlen(lpOut));

	ReleaseDC(hWnd, hdc);

	if (score == 10000)
		NextStage();
	if (score == 50000)
		GameOver();
}
void NextStage()
{
	score += 100;
	level++;
	MessageBox(NULL, _T("\tStage Celar!!\nPress OK button to NextStage"), _T("Stage Clear"), MB_OK);
}
void GameOver()
{
	MessageBox(NULL, _T("GameOver!!"), _T("GameOver"), MB_OK);
	exit(0);
}
void FileEception(FILE* fp)
{
	if (fp == NULL)
	{
		printf("file not found");
		getchar();
		exit(0);
	}
}
void LoadException(HBITMAP hbitmap)
{
	if (hbitmap == NULL) {
		MessageBox(NULL, _T("이미지 로드 실패!!"), _T("error"), MB_OK);
		exit(0);
	}
}
void ImageLoad()
{
	IWICBitmapDecoder *p_decoder;     // 압축된 이미지를 해제할 객체
	IWICBitmapFrameDecode *p_frame;   // 특정 그림을 선택한 객체
	IWICFormatConverter *p_converter; // 이미지 변환 객체
									  // 파일을 구성하는 이미지 중에서 첫번째 이미지를 선택한다.
	g_wic_factory->CreateDecoderFromFilename(L"background2.dib", NULL, GENERIC_READ,
		WICDecodeMetadataCacheOnDemand, &p_decoder);
	p_decoder->GetFrame(0, &p_frame);
	g_wic_factory->CreateFormatConverter(&p_converter);
	p_converter->Initialize(p_frame, GUID_WICPixelFormat32bppPBGRA,
		WICBitmapDitherTypeNone, NULL, 0.0f, WICBitmapPaletteTypeCustom);
	g_ipRenderTarget->CreateBitmapFromWicBitmap(p_converter, NULL, &bg_bitmap);

	g_wic_factory->CreateDecoderFromFilename(L"player.dib", NULL, GENERIC_READ,
		WICDecodeMetadataCacheOnDemand, &p_decoder);
	p_decoder->GetFrame(0, &p_frame);
	g_wic_factory->CreateFormatConverter(&p_converter);
	p_converter->Initialize(p_frame, GUID_WICPixelFormat32bppPBGRA,
		WICBitmapDitherTypeNone, NULL, 0.0f, WICBitmapPaletteTypeCustom);
	g_ipRenderTarget->CreateBitmapFromWicBitmap(p_converter, NULL, &player_bitmap);

	g_wic_factory->CreateDecoderFromFilename(L"player_left1.dib", NULL, GENERIC_READ,
		WICDecodeMetadataCacheOnDemand, &p_decoder);
	p_decoder->GetFrame(0, &p_frame);
	g_wic_factory->CreateFormatConverter(&p_converter);
	p_converter->Initialize(p_frame, GUID_WICPixelFormat32bppPBGRA,
		WICBitmapDitherTypeNone, NULL, 0.0f, WICBitmapPaletteTypeCustom);
	g_ipRenderTarget->CreateBitmapFromWicBitmap(p_converter, NULL, &player_left1_bitmap);

	g_wic_factory->CreateDecoderFromFilename(L"player_right1.dib", NULL, GENERIC_READ,
		WICDecodeMetadataCacheOnDemand, &p_decoder);
	p_decoder->GetFrame(0, &p_frame);
	g_wic_factory->CreateFormatConverter(&p_converter);
	p_converter->Initialize(p_frame, GUID_WICPixelFormat32bppPBGRA,
		WICBitmapDitherTypeNone, NULL, 0.0f, WICBitmapPaletteTypeCustom);
	g_ipRenderTarget->CreateBitmapFromWicBitmap(p_converter, NULL, &player_right1_bitmap);

	g_wic_factory->CreateDecoderFromFilename(L"player_left2.dib", NULL, GENERIC_READ,
		WICDecodeMetadataCacheOnDemand, &p_decoder);
	p_decoder->GetFrame(0, &p_frame);
	g_wic_factory->CreateFormatConverter(&p_converter);
	p_converter->Initialize(p_frame, GUID_WICPixelFormat32bppPBGRA,
		WICBitmapDitherTypeNone, NULL, 0.0f, WICBitmapPaletteTypeCustom);
	g_ipRenderTarget->CreateBitmapFromWicBitmap(p_converter, NULL, &player_left2_bitmap);

	g_wic_factory->CreateDecoderFromFilename(L"player_right2.dib", NULL, GENERIC_READ,
		WICDecodeMetadataCacheOnDemand, &p_decoder);
	p_decoder->GetFrame(0, &p_frame);
	g_wic_factory->CreateFormatConverter(&p_converter);
	p_converter->Initialize(p_frame, GUID_WICPixelFormat32bppPBGRA,
		WICBitmapDitherTypeNone, NULL, 0.0f, WICBitmapPaletteTypeCustom);
	g_ipRenderTarget->CreateBitmapFromWicBitmap(p_converter, NULL, &player_right2_bitmap);

	g_wic_factory->CreateDecoderFromFilename(L"stone.dib", NULL, GENERIC_READ,
		WICDecodeMetadataCacheOnDemand, &p_decoder);
	p_decoder->GetFrame(0, &p_frame);
	g_wic_factory->CreateFormatConverter(&p_converter);
	p_converter->Initialize(p_frame, GUID_WICPixelFormat32bppPBGRA,
		WICBitmapDitherTypeNone, NULL, 0.0f, WICBitmapPaletteTypeCustom);
	g_ipRenderTarget->CreateBitmapFromWicBitmap(p_converter, NULL, &stone_bitmap);

	g_wic_factory->CreateDecoderFromFilename(L"item.dib", NULL, GENERIC_READ,
		WICDecodeMetadataCacheOnDemand, &p_decoder);
	p_decoder->GetFrame(0, &p_frame);
	g_wic_factory->CreateFormatConverter(&p_converter);
	p_converter->Initialize(p_frame, GUID_WICPixelFormat32bppPBGRA,
		WICBitmapDitherTypeNone, NULL, 0.0f, WICBitmapPaletteTypeCustom);
	g_ipRenderTarget->CreateBitmapFromWicBitmap(p_converter, NULL, &item_bitmap);


	p_frame->Release();   // 그림파일에 있는 이미지를 선택하기 위해 사용한 객체 제거
	p_decoder->Release();     // 압축을 해제하기 위해 생성한 객체 제거
	p_converter->Release();  // 이미지 변환 객체 제거
}
void FileLoad()
{
	FILE * fp;
	fp = fopen("background2.dib", "rb");

	FileEception(fp);
	fread(&bfh, sizeof(bfh), 1, fp);
	fread(&bih, sizeof(bih), 1, fp);

	bg_width = bih.biwidth;
	bg_height = bih.biheight;

	bg_image_rect.right = (FLOAT)bg_width;
	bg_image_rect.bottom = (FLOAT)bg_height;

	fp = fopen("item.dib", "rb");

	FileEception(fp);
	fread(&bfh, sizeof(bfh), 1, fp);
	fread(&bih, sizeof(bih), 1, fp);

	item_width = bih.biwidth;
	item_height = bih.biheight;

	item_image_rect.right = (FLOAT)item_width;
	item_image_rect.bottom = (FLOAT)item_height;

	fp = fopen("stone.dib", "rb");
	FileEception(fp);
	fread(&bfh, sizeof(bfh), 1, fp);
	fread(&bih, sizeof(bih), 1, fp);

	stone_width = bih.biwidth;
	stone_height = bih.biheight;

	stone_image_rect.right = (FLOAT)stone_width;
	stone_image_rect.bottom = (FLOAT)stone_height;

	fp = fopen("player.dib", "rb");
	FileEception(fp);
	fread(&bfh, sizeof(bfh), 1, fp);
	fread(&bih, sizeof(bih), 1, fp);

	player_width = bih.biwidth;
	player_height = bih.biheight;

	player_image_rect.right = (FLOAT)player_width;
	player_image_rect.bottom = (FLOAT)player_height;

	fclose(fp);
}

void InitializeD2D()
{
	HRESULT hr = E_FAIL;

	// D2D Factroy 생성
	hr = D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, &g_ipD2DFactory);
}
void CreateRenderTarget(HWND hWnd)
{
	HRESULT hr = E_FAIL;

	// 윈도우 클라이언트 영역을 얻는다.

	RECT rc;
	GetClientRect(hWnd, &rc);

	// 클라이언트 영역만큼 렌더타겟을 생성한다.

	g_ipD2DFactory->CreateHwndRenderTarget(RenderTargetProperties(),
		HwndRenderTargetProperties(hWnd, SizeU(rc.right, rc.bottom)),
		&g_ipRenderTarget);
}
